@inline
fun print(c: Char) {
    asm[Nothing]("""
        print [c];
        flushStr;
    """);
}

@inline
fun print(i: Number) {
    asm[Nothing]("""
        print [i];
        flush;
    """);
}

@inline
fun read(): Number {
    let i: Number;
    asm[Nothing]("""
        read [i];
    """);
    return i;
}

fun alloc[T](n: Number): T* {
    let amount = n * sizeOf[T]();
    let ptr = asm[T*]("push $heapSize;");
    asm[Nothing]("""
        push [amount];
        for {
            @heap.push 0;
            inc $heapSize;
        };
    """);
    return ptr;
}

@inline
fun alloc[T](): T* {
    return alloc[T](1);
}

fun pow(base: Number, exp: Number): Number {
    let result = 1;
    for (let i = 0; i != exp; i += 1) {
        result *= base;
    }
    return result;
}

@inline
fun ptrOffset[T](ptr: T*, offset: Number): T* {
    return transmute[Number, T*](transmute[T*, Number](ptr) + offset);
}

struct Array[T] {
    data: T*;
    len: Number;
}

fun get[T](arr: Array[T], index: Number): T {
    let ptr = ptrOffset[T](arr.data, index * sizeOf[T]());
    return *ptr;
}

fun set[T](arr: Array[T], index: Number, value: T) {
    let ptr = ptrOffset[T](arr.data, index * sizeOf[T]());
    *ptr = value;
}

fun newArray[T](len: Number): Array[T] {
    let data = alloc[T](len);
    return Array[T] {
        .data = data,
        .len = len
    };
}

fun get(s: String, index: Number): Char {
    let ptr = ptrOffset[Char](s.data, index);
    return *ptr;
}

fun print(s: String) {
    for (let i = 0; i != s.len; i += 1) {
        print(get(s, i));
    }
}