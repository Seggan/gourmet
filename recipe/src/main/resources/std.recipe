macro nop { exec {}; }

macro copy src dest {
    push src;
    pop dest;
}

macro clone reg {
    pop reg;
    push reg;
}

macro dup {
    def $temp;
    clone $temp;
    push $temp;
    del $temp;
}

macro pop { pop $null; }

macro def var init {
    def var;
    push init;
    pop var;
}

macro inc reg {
    push reg;
    add 1;
    pop reg;
}

macro inc { add 1; }

macro dec reg {
    push reg;
    sub 1;
    pop reg;
}

macro dec { sub 1; }

macro neg reg {
    def $tempNeg reg;
    push 0;
    sub $tempNeg;
    del $tempNeg;
}

macro neg { neg { nop; }; }

macro pow y {
    ifelse y {
        def $toPow;
        clone $toPow;
        push y;
        sub 1;
        for {
            mul $toPow;
        };
        del $toPow;
    } {
        push 1;
    };
}

macro sign {
    dup;
    if {
        def $tempSign;
        pop $tempSign;
        def @tempSign;
        @tempSign.exec {
            neg 1;
            push 1;
            rot $tempSign;
            pop;
            pop $tempSign;
        };
        push $tempSign;
        del $tempSign;
        undef @tempSign;
    };
}

macro eq y {
    def $tempEq;
    sub y;
    clone $tempEq;
    mul $tempEq; // prevent negative values from causing shenanigans
    pop $tempEq;
    not $tempEq;
    del $tempEq;
}

macro gt y {
    sub y;
    sign;
    eq 1;
}

macro lt y {
    sub y;
    sign;
    neg 1;
    eq { nop; };
}

macro not bool {
    def $tempNot bool;
    push 1;
    if $tempNot {
        pop;
        push 0;
    };
    del $tempNot;
}

macro bool val {
    def $tempBool val;
    push 0;
    if $tempBool {
        pop;
        push 1;
    };
    del $tempBool;
}

macro and reg { mul reg; }

macro or reg {
    add reg;
    bool { nop; };
}

macro if cond block { while cond { exec block; break; }; }

macro if block { while { exec block; break; }; }

macro ifelse true false {
    def $tempIfElse;
    pop $tempIfElse;
    if $tempIfElse true;
    not $tempIfElse;
    if false;
}